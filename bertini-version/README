(1) Example: Run the following commands

    cd Tests/Example-p10a
    python2 ../../multiregeneration.py

The data of the run will be stored in Tests/Example-p10a/run

(2) Our implementation has one main input file (inputFile.py) to specify the multiregeneration
solving settings and three tracking input files:

(2i) tracking_equations sets the polynomial system we are solving
This file must contain the line:

function f_1, f_2, ..., f_n;

and lines

f_1 = --a polynomial expression-- ;
f_2 = --a polynomial expression-- ;
...
f_n = --a polynomial expression-- ;

where f_i denotes a symbol and --a polynomial expression --
is a polynomial expression in the variables.
The syntax follows that of Bertini and a line should end with a semicolon.

(2ii) tracking_variables sets the variable groups
Each line of this file must be of the form

hom_variable_group --a list of symbols -- ;

or

variable_group --a list of symbols -- ;

where --a list of symbols -- could be taken as
"x, y, z"

(2iii) tracking_options specifies how the path tracking is done.
For a detailed list of these options see the Bertini user manual. 

(3) To run our implementation Python2 and Bertini must be installed.

(3a) Python is an interpreted high-level programming language for
general-purpose programming. For more information see
https://www.python.org/

(3b) Bertini is a general-purpose solver, written in C, that was created by
Daniel J. Bates, Jonathan D. Hauenstein, Andrew J. Sommese, and Charles W. Wampler
 for research about polynomial continuation. For more information see
https://bertini.nd.edu/

[Caution] A frequently reported issue for Mac users: the first time Bertini
is called an error regarding mpfr is displayed.
